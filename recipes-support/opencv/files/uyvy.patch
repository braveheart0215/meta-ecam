diff -ru OpenCV-2.4.3/modules/highgui/src/cap_libv4l.cpp OpenCV-2.4.3.new/modules/highgui/src/cap_libv4l.cpp
--- OpenCV-2.4.3/modules/highgui/src/cap_libv4l.cpp	2012-10-12 15:55:22.000000000 -0700
+++ OpenCV-2.4.3.new/modules/highgui/src/cap_libv4l.cpp	2013-09-16 10:24:34.589609933 -0700
@@ -268,6 +268,16 @@
 
 #define MAX_DEVICE_DRIVER_NAME 80
 
+struct uyvy
+{
+  unsigned char u, y0, v, y1; // uint8, hopefully
+};
+
+struct uyvy_yy
+{
+  unsigned char y0, y1; // uint8, hopefully
+};
+
 /* Device Capture Objects */
 /* V4L2 structure */
 struct buffer
@@ -715,17 +725,17 @@
   /* libv4l will convert from any format to V4L2_PIX_FMT_BGR24 */
   CLEAR (capture->form);
   capture->form.type                = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-  capture->form.fmt.pix.pixelformat = V4L2_PIX_FMT_BGR24;
+  capture->form.fmt.pix.pixelformat = V4L2_PIX_FMT_UYVY;
   capture->form.fmt.pix.field       = V4L2_FIELD_ANY;
-  capture->form.fmt.pix.width = capture->width;
-  capture->form.fmt.pix.height = capture->height;
+  capture->form.fmt.pix.width = 640;
+  capture->form.fmt.pix.height = 480;
 
   if (-1 == xioctl (capture->deviceHandle, VIDIOC_S_FMT, &capture->form)) {
       fprintf(stderr, "HIGHGUI ERROR: libv4l unable to ioctl S_FMT\n");
       return -1;
   }
 
-  if (V4L2_PIX_FMT_BGR24 != capture->form.fmt.pix.pixelformat) {
+  if (V4L2_PIX_FMT_UYVY != capture->form.fmt.pix.pixelformat) {
       fprintf( stderr, "HIGHGUI ERROR: libv4l unable convert to requested pixfmt\n");
       return -1;
   }
@@ -836,7 +846,7 @@
    cvInitImageHeader( &capture->frame,
                       cvSize( capture->captureWindow.width,
                               capture->captureWindow.height ),
-                      IPL_DEPTH_8U, 3, IPL_ORIGIN_TL, 4 );
+                      IPL_DEPTH_8U, 1, IPL_ORIGIN_TL, 4 );
    /* Allocate space for RGBA data */
    capture->frame.imageData = (char *)cvAlloc(capture->frame.imageSize);
 
@@ -1252,7 +1262,7 @@
         cvInitImageHeader( &capture->frame,
               cvSize( capture->form.fmt.pix.width,
                   capture->form.fmt.pix.height ),
-              IPL_DEPTH_8U, 3, IPL_ORIGIN_TL, 4 );
+              IPL_DEPTH_8U, 1, IPL_ORIGIN_TL, 4 );
        capture->frame.imageData = (char *)cvAlloc(capture->frame.imageSize);
     }
 
@@ -1275,9 +1285,17 @@
   {
 
     if(capture->buffers[capture->bufferIndex].start){
-      memcpy((char *)capture->frame.imageData,
-         (char *)capture->buffers[capture->bufferIndex].start,
-         capture->frame.imageSize);
+      // imageSize is the size of the grayscale image. We deal with two pixels at a time,
+      // so only loop over half of imageSize.
+      for (int i = 0; i < capture->frame.imageSize/2; ++i)
+      {
+        uyvy data;
+        memcpy(&data, (char *)(capture->buffers[capture->bufferIndex].start+i*sizeof(uyvy)), sizeof(uyvy));
+        uyvy_yy values;
+        values.y0 = data.y0;
+        values.y1 = data.y1;
+        memcpy((char *)(capture->frame.imageData+i*sizeof(uyvy_yy)), &values, sizeof(uyvy_yy));
+      }
     }
 
   } else
